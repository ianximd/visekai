version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ocr_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ocr_db}
      POSTGRES_USER: ${POSTGRES_USER:-ocr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ocr_user} -d ${POSTGRES_DB:-ocr_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ocr_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ocr_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ocr_network
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ocr_backend
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      OCR_SERVICE_URL: http://ocr-service:8000
      REDIS_URL: redis://redis:6379
    volumes:
      - ./storage:/app/storage
      - ./backend:/app
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ocr_network
    restart: unless-stopped

  ocr-service:
    build: 
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: ocr_service
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379
    volumes:
      - ./storage:/app/storage
      - model_cache:/root/.cache/huggingface
      - ./ocr-service:/app
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ocr_network
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: ocr_frontend
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - ocr_network
    restart: unless-stopped

  # Optional: Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: ocr_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ocr_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_cache:
    driver: local

networks:
  ocr_network:
    driver: bridge
